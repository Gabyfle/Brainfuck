; Generated by Brainfuck, a brainfuck compiler written in OCaml
;   @author Gabriel Santamaria <gaby.santamaria@outlook.fr>

; During the process, EDX will carry the cell address

; System calls macros
; write to ebx
%define SYS_WRITE 4
; read from ebx
%define SYS_READ  3
; exit program
%define SYS_EXIT  1

section .data
    program times 30000 db 0

section .text
    global _start
    _start:
        mov edx, program

        add byte [edx], 8
        loop_8428047:
            cmp [edx], byte 0
            jz end_loop_8428047

                        add edx, byte 1
        add byte [edx], 4
        loop_9362999:
            cmp [edx], byte 0
            jz end_loop_9362999

                        add edx, byte 1
        add byte [edx], 2
        add edx, byte 1
        add byte [edx], 3
        add edx, byte 1
        add byte [edx], 3
        add edx, byte 1
        add byte [edx], 1
        sub edx, byte 4
        sub byte [edx], 1


            jmp loop_9362999
        end_loop_9362999:
        add edx, byte 1
        add byte [edx], 1
        add edx, byte 1
        add byte [edx], 1
        add edx, byte 1
        sub byte [edx], 1
        add edx, byte 2
        add byte [edx], 1
        loop_366205796:
            cmp [edx], byte 0
            jz end_loop_366205796

                        sub edx, byte 1


            jmp loop_366205796
        end_loop_366205796:
        sub edx, byte 1
        sub byte [edx], 1


            jmp loop_8428047
        end_loop_8428047:
        add edx, byte 2

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add edx, byte 1
        sub byte [edx], 3

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add byte [edx], 7

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx


        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add byte [edx], 3

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add edx, byte 2

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        sub edx, byte 1
        sub byte [edx], 1

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        sub edx, byte 1

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add byte [edx], 3

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        sub byte [edx], 6

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        sub byte [edx], 8

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add edx, byte 2
        add byte [edx], 1

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx

        add edx, byte 1
        add byte [edx], 2

        mov eax, SYS_WRITE ; sys_write()
        mov ebx, 1         ; stdout
        mov ecx, edx       ; print value from the address contained in EDX
        mov edx, 1         ; print just one char
        int 0x80           ; kernel interupt
        ; reset EDX to the address of the current working cell
        mov edx, ecx



        mov eax, SYS_EXIT
        mov ebx, 0
        int 0x80

